val
int
sd <- seq(1,100,length=1000)
plot(sd,-2 + c(-1, 1) * qt(0.975, n - 1) * sd/sqrt(n))
sd <- seq(1,10,length=1000)
plot(sd,-2 +  ( qt(0.975, n - 1) * sd/sqrt(n)))
n <- 9
plot(sd,-2 +  ( qt(0.975, n - 1) * sd/sqrt(n)))
2*sqrt(n)/qt(0.975,n-1)
rm(list=ls())
t.test
nx <- 10
ny <- 10
sx <- sqrt(0.6)
mx <- 3
my <- 5
sy <- sqrt(0.68)
qt
sx^2
sy^2
vp <- (9*(1.28))/16
vp
-2 + c(-1,1)*qt(0.975,16)*sqrt(vp*(2/9))
vp <- 0.64
-2 + c(-1,1)*qt(0.975,16)*sqrt(vp*(2/9))
-2 + c(-1,1)*qt(0.975,18)*sqrt(vp*(2/9))
-2 + c(-1,1)*qt(0.975,18)*sqrt(vp*(2/10))
nx <- 100
ny<- 100
mx <- 4
my <- 6
sx <- 0.5
sy <- 2
vp <- (((nx - 1)*sx*sx) + ((ny-1)*sy*sy))/(nx+ny-2)
sp <- sqrt(vp)
(mx - my) + c(-1,1)*qt(0.975,nx+ny-2)*sqrt(vp*((1/nx)+(1/ny)))
nx <- 9
ny <- 9
mx <- -3
my <- 1
sx <- 1.5
sy <- 1.8
vp <- (((nx - 1)*sx*sx) + ((ny-1)*sy*sy))/(nx+ny-2)
sp <- sqrt(vp)
(mx - my) + c(-1,1)*qt(0.95,nx+ny-2)*sqrt(vp*((1/nx)+(1/ny)))
rm(list=ls())
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
qnorm(0.95,0,1)
%
_
qnorm(0.95,0,1)*4/10
12-(qnorm(0.95,0,1)*4/10)
qt(0.975,15)
qt(0.975,8)
dt(0.8,15)
pt(0.975,8)
pt(0.8,15)
pt(0.8,15,FALSE)
ls()
rm(list=ls())
ls()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
dTable
library(rCharts)
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
install.packages("devtools")
library(rCharts)
dTable
d
class(d)
rm(list=ls())
library(rCharts)
d
dTable
dTable(airquality, sPaginationType = "full_numbers")
d <- dTable(airquality, sPaginationType = "full_numbers")
class(d)
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
install.packages("shiny")
install.packages("slidify")
install.packages("devtools")
install.packages("devtools")
library("swirl")
library(swirl)
library(rswirl)
install.packages("swirl")
install.packages("LinearizedSVR")
rm(list=ls())
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sum(x*w)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
sum(x*y)/sum(x*x)
data(mtcars)
dim(mtcars)
mtcars$mpg
mtcars$weight
names(mtcars)
mtcars$wt
lm(mtcars$mpg ~ mtcars$wt)
x<- mtcars$wt
y<-mtcars$mpg
sx <- sum(x)
sy <- sum(y)
(sum(x*y)-(sx*sy))/(sum(x*x)-(sx*sx))
sd(1,2)
sd(c(1,2))
sqrt(0.5)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x-mean(x)
y <- x-mean(x)
sd(y)
z <- y/sd(y)
z
sd(z)
var(z)
mean(z)
x
y
lm(x~y)
x <-mtcars$wt
y<- mtcars$mpg
vx <- var(x)
vy <- var(y)
syx <- lm(y~x)$y
sxy <- lm(x~y)$x
syx/sxy
syx
syx
lm(y~x)
lm(y~x)$Coefficients$x
lm(y~x)$Coefficients
lm(x~y)
-5.344 /(-0.1409)
vx/vy
vy/vx
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
ls()
ls()
n <-100;t<-rep(c(0,1),c(n/2,n/2));x <- c(runif(n/2),runif(n/2))
b0 <- 0; b1 <-2; tau<-1; sigma <-0.2
y<- b0 + x*b1 + t*tau + rnorm(n,sd=sigma)
plot(x,y,type="n",frame=FALSE)
abline(lm(y~x),lwd=2)
abline(h=mean(y[1:(n/2)]),lwd=3)
abline(h=mean(y[(n/2)+1:(n)]),lwd=3)
fit <_ lm(y~x+t)
fit <- lm(y~x+t)
abline(coef(fit)[1],coef(fit)[2],lwd=3)
abline(coef(fit)[1]+coef(fit)[3],coef(fit)[2],lwd=3)
points(x[1:n/2],y[1:n/2],pch=21,col="black",bg="lightblue",cex=2)
points(x[1+(n/2):n],y[1+(n/2):n],pch=21,col="black",bg="salmon",cex=2)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
f <- lm(y~x)
influence(f)
influence(f)$hat
x
names(influence(f))
dfbeta(f)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
f <- lm(y~x)
influence(f)$hat
dfbeta(f)
f
dfbetas(f)
f <- lm(mpg~as.factor(cyl)+wt,data=mtcars)
f
fa <- lm(mpg~as.factor(cyl),data=mtcars)
fa
f1 <- lm(mpg~as.factor(cyl)+wt,data=mtcars)
f2 <- update(f1,mpg~as.factor(cyl)+wt+as.factor(cyl)*wt )
anova(f1,f2)
anova(f2,f1)
getwd()
library(MASS)
?shuttle
shuttle
x
x
library(MASS)
head(shuttle)
table(shuttle$wind)
q1 <- glm(use ~ wind,data=shuttle,family=binomial)
summary(q1)
names(shuttle)
table(sign)
table(shuttle$sign)
table(shuttle)
table(shuttle$auto)
names(shuttle)
table(shuttle$use)
class(shuttle$use)
library(MASS)
data(shuttle)
head(shuttle)
levels(shuttle$use)
wind
shuttle$wind
q1 <- glm(use ~ wind, data="shuttle",family=binomial)
q1 <- glm(use ~ wind, data=shuttle,family=binomial)
q1
levels(shuttle$use)
levels(shuttle$use)<-c(1,0)
table(shuttle$use)
q1 <- glm(use~wind,data=shuttle,family=binomial)
q1
levels(shuttle$wind)
levels(shuttle$wind) <- c(1,0)
shuttle$wind <- as.numeric(shuttle$wind)
q1 <- glm(use~wind,data=shuttle,family=binomial)
q1
exp(-0.03181)
1-0.03181
x <- seq(-10,10,length=1000)
q2 <- glm(use ~ wind + magn,data=shuttle,family=binomial)
q2
exp(-3.201e-02)
x
plot(x,exp(1+2*x)/(1+exp(1+2*x)))
plot(x,exp(-1+2*x)/(1+exp(-1+2*x)))
x11()
x11()
plot(x,exp(-1+2*x)/(1+exp(-1+2*x)))
plot(x,exp(1+2*x)/(1+exp(1+2*x)))
lines(x,exp(1+2*x)/(1+exp(1+2*x)))
lines(x,exp(-1+2*x)/(1+exp(-1+2*x)))
lines(x,exp(-1-2*x)/(1+exp(-1-2*x)))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
rf <- train(y~.,data=vowel.train,method="rf")
gbm <- train(y~.,data=vowel.train,method="gbm")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(caret)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
rffit <- train(y~.,data=vowel.train,method="rf")
confusionMatrix(predict(rfffit,vowel.test),vowel.test$y)
confusionMatrix(predict(rffit,vowel.test),vowel.test$y)
set.seed(33833)
rffit <- train(y~.,data=vowel.train,method="rf")
confusionMatrix(predict(rffit,vowel.test),vowel.test$y)
gfit <- train(y~.,data=vowel.train,method="gbm")
confusionMatrix(predict(gfit,vowel.test),vowel.test$y)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
install.packages("AppliedPredictiveModeling")
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
names(training)
dim(training)
rfit <- train(diagnosis~.,data=training,method="rf")
gfit <- train(diagnosis~.,data=training,method="gbm")
lfit <- train(diagnosis~.,data=training,method="lda")
rp <- predict(rfit,training)
gp <- predict(gfit,training)
lp <- predict(lfit,training)
newx <- cbind(training$diagnosis,rp,gp,lp)
dim(newx)
names(newx)
newx <- as.data.frame(newx)
names(newx)
rp <- predict(rfit,testing)
gp <- predict(gfit,testing)
lp <- predict(lfit,testing)
newy <- cbind(testing$diagnosis,rp,gp,lp)
newy <- as.data.frame(newy)
names(newy)
stack <- train(V1~.,data=newx,method="rf")
warnings()
confusionMatrix(newy$V1,predict(stacked,newy))
confusionMatrix(newy$V1,predict(stack,newy))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
m1 <- train(diagnosis~.,data=training,method=rf)
m1 <- train(diagnosis~.,data=training,method="rf")
m2 <-train(diagnosis~.,data=training,method="gbm")
m3<-train(diagnosis~.,data=training,method="lda")
p1 <- predict(m1,data=training)
p1 <- predict(m1,training)
p2 <- predict(m2,training)
p3 <- predict(m3,training)
finaltr <- train(training$diagnosis~p1+p2+p3,method="rf")
meta <- as.data.frame(cbind(p1,p2,p3))
dim(meta)
finaltr <- train(training$diagnosis~p1+p2+p3,data=meta,method="rf")
p1 <- predict(m1,testing)
p2 <- predict(m2,testing)
p3 <- predict(m3,testing)
metat <- as.data.frame(cbind(p1,p2,p3))
confusionMatrix(predict(finaltr,metat),testing$diagnosis)
confusionMatrix(predict(m1,testing),testing$diagnosis)
names(confusionMatrix(predict(m1,testing),testing$diagnosis))
names(confusionMatrix(predict(m1,testing),testing$diagnosis))$overall
names(confusionMatrix(predict(m1,testing),testing$diagnosis))[3]
confusionMatrix(predict(m1,testing),testing$diagnosis)$overall
confusionMatrix(predict(m1,testing),testing$diagnosis)$overall[1]
confusionMatrix(predict(m2,testing),testing$diagnosis)$overall[1]
confusionMatrix(predict(m3,testing),testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
names(concrete)
m <- svm(CompressiveStrength~.,data=training)
p <- predict(m,testing)
summary(p)
p
c <- testing$CompressiveStrength
c
sqrt(sum((c-p)^2))/length(c)
sqrt(sum((c-p)^2)/length(c))
package(forecast)
library(forecast)
install.packages("forecast")
install.packages("forecast")
getwd)
getwd()
dat=read.csv("gaData.csv")
training = dat[year(dat$date)  2011,]
tstrain = ts(training$visitsTumblr)
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
dat$date
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
year
names(dat)
ts
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
install.packages("AppliedPredictiveModeling")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
createDatapartition
createDataPartition
createdatapartition
library(caret)
install.packages("caret")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
f <- train(CompressiveStrength~.,data=concrete,method="lasso")
f <- train(CompressiveStrength~.,data=concrete,method="lasso")
x11();plot.enet(fit$finalModel, xvar="penalty", use.color=T)
x11();plot.enet(f$finalModel, xvar="penalty", use.color=T)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
plot.enet(fit$finalModel, xvar="penalty", use.color=T)
library(elasticnet)
fit <- train(CompressiveStrength~.,data=concrete,method="lasso")
plot.enet(fit$finalModel, xvar="penalty", use.color=T)
x11()
plot.enet(fit$finalModel, xvar="penalty", use.color=T)
dat = read.csv("gaData.csv")
install.packages("lubridate")
require(lubridate)
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
library(caret)
library(lubridate)
dat <- read.csv("gaData.csv")
training = dat[year(dat$date)==2011,]
tstrain = ts(training$visitsTumblr)
package(forecast)
library(forecast)
training
tstrain
testing =  dat[year(dat$date)!=2011,]
tstest = ts(testing$visitsTumblr)
table(year(dat$date))
f <- bats(tstrain)
forecast(tstest)
head(tstest)
sum(tstest <= forecast(tstest)$Hi.95 & tstest>= forecast(tstest)$Lo.95)/length(tstest)
TRUE & FALSE
TRUE & TRUE
fr <- forecast(tstest)
names(fr)
fr
head(fr(upper))
head(fr$upper
)
dim(fr)
dim(fr$upper)
dat.fit <- bats(training$visitsTumblr)
pred <- forecast(dat.fit, h=length(testing$visitsTumblr),level=c(80,95))
max(pred$lower[,2])
accuracy <- 1-sum(testing$visitsTumblr>pred$upper[,2])/length(testing$visitsTumblr)
accuracy
accuracy*100
library(caret)
rm(list=ls())
setwd("~/Coursera/LearnR/introtoLA2")
library(knitr)
library(slidify)
slidify()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
knitr("indexpdf.Rmd")
library(knitr)
knitr("indexpdf.Rmd")
knit2pdf("indexpdf.Rmd")
